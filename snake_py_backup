import pygame
import random
from enum import Enum
from collections import namedtuple
import numpy

pygame.init()
font = pygame.font.Font('arial.ttf', 25)
#font = pygame.font.SysFont('arial', 25)
#reset
#reward
#play(action) -> direction
#game_itiration
#is_collision

class Direction(Enum):
    RIGHT = 1
    LEFT = 2
    UP = 3
    DOWN = 4
    
Point = namedtuple('Point', 'x, y')

# rgb colors
WHITE = (255, 255, 255)
RED = (200,0,0)
BLUE1 = (0, 0, 255)
BLUE2 = (0, 100, 255)
BLACK = (0,0,0)

BLOCK_SIZE = 20
SPEED = 20

class SnakeGameAI:
    
    def __init__(self, w=640, h=480):
        self.w = w
        self.h = h
        # init display
        self.display = pygame.display.set_mode((self.w, self.h))
        pygame.display.set_caption('Snake')
        self.clock = pygame.time.Clock()
        self.reset()
        
        # init game state


    def reset(self):
        self.direction = Direction.RIGHT

        self.head = Point(self.w / 2, self.h / 2)
        self.snake = [self.head,
                      Point(self.head.x - BLOCK_SIZE, self.head.y),
                      Point(self.head.x - (2 * BLOCK_SIZE), self.head.y)]

        self.score = 0
        self.food = None
        self._place_food()
        self.frame_iteration = 0
        
    def _place_food(self):
        x = random.randint(0, (self.w-BLOCK_SIZE )//BLOCK_SIZE )*BLOCK_SIZE 
        y = random.randint(0, (self.h-BLOCK_SIZE )//BLOCK_SIZE )*BLOCK_SIZE
        self.food = Point(x, y)
        if self.food in self.snake:
            self._place_food()
        
    def play_step(self, action):
        # 1. collect user input
        self.frame_iteration +=1
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        
        # 2. move
        self._move(action) # update the head
        self.snake.insert(0, self.head)
        
        # 3. check if game over
        reward = 0
        game_over = False
        #or  self.frame_iteration > 100*len(self.snake)
        if self.is_collision() :
            game_over = True
            reward = -10
            return reward, game_over, self.score
            
        # 4. place new food or just move
        if self.head == self.food:
            self.score += 1
            reward = 10
            self._place_food()
        else:
            self.snake.pop()
        
        # 5. update ui and clock
        self._update_ui()
        self.clock.tick(SPEED)
        # 6. return game over and score
        return reward,game_over, self.score
    
    def is_collision(self, pt=None):
        # hits boundary
        if pt is None:
            pt = self.head
        if pt in self.snake[1:]:
            return True
        return False

    def euclideanCost(positie, goal):  # use a euclidean measurement to use as a cost
        return ((positie.x - goal.x) ** 2 + (positie.y - goal.y) ** 2) ** 0.5

    def isGoalState(self, game):
        if game.snake[0].x == game.food.x and game.snake[0].y == game.food.y:
            return True
        else:
            return False

    def getStartState(self):
        return self.snake
    def getSuccesors(self,current_pos):
            cost=0
            successors=[]
            possible_moves=[+BLOCK_SIZE,-BLOCK_SIZE]
            for move in possible_moves:
                nextx=self.heah.x+move
                nexty=self.head.y
                point=Point(nextx,nexty)
            if point not in self.snake[1:]:
                nextState=point
                if nextState!=current_pos:
                    if nextState not in successors:
                        dirr=""
                        if move == +BLOCK_SIZE:
                            dirr="Right"
                            cost= (self.euclideanCost(current_pos, self.food) / 2)
                        elif move == -BLOCK_SIZE:
                            diff="Left"
                            cost= (self.euclideanCost(current_pos, self.food) / 2)
                    successors.append((nextState,dirr,cost))

            for move in possible_moves:
                nextx=self.heah.x
                nexty=self.head.y+move
                point=Point(nextx,nexty)
            if point not in self.snake[1:]:
                nextState=point
                if nextState!=current_pos:
                    if nextState not in successors:
                        dirr = ""
                        if move == +BLOCK_SIZE:
                            dirr = "Up"
                            cost= (self.euclideanCost(current_pos, self.food) / 2)
                        elif move == -BLOCK_SIZE:
                            dirr = "Down"
                            cost= (self.euclideanCost(current_pos, self.food) / 2)
                    successors.append((nextState,dirr,cost))
            return successors







    def _update_ui(self):
        self.display.fill(BLACK)
        
        for pt in self.snake:
            pygame.draw.rect(self.display, BLUE1, pygame.Rect(pt.x, pt.y, BLOCK_SIZE, BLOCK_SIZE))
            pygame.draw.rect(self.display, BLUE2, pygame.Rect(pt.x+4, pt.y+4, 12, 12))
            
        pygame.draw.rect(self.display, RED, pygame.Rect(self.food.x, self.food.y, BLOCK_SIZE, BLOCK_SIZE))
        
        text = font.render("Score: " + str(self.score), True, WHITE)
        self.display.blit(text, [0, 0])
        pygame.display.flip()
        
    def _move(self, action):
        # [stanga , inainte , dreapta]

        step= [Direction.RIGHT, Direction.DOWN, Direction.LEFT, Direction.UP]
        idx = step.index(self.direction)

        if numpy.array_equal(action, [0,1,0]):
            new_dir= step[idx]
        elif numpy.array_equal(action, [1,0,0]):
            aux =  (idx + 1 ) %4
            new_dir = step[aux]
        else:
            aux = (idx - 1) % 4
            new_dir = step[aux]

        self.direction=new_dir

        x = self.head.x
        y = self.head.y
        if self.direction == Direction.RIGHT:
            if(x+BLOCK_SIZE==660):
                x = 0
            else:
                x += BLOCK_SIZE

        if self.direction == Direction.LEFT:
            if(x-BLOCK_SIZE==-20):
                x = 640
            else:
                  x -= BLOCK_SIZE
        if self.direction == Direction.DOWN:
            if(y+BLOCK_SIZE==500):
                y=0
            else:
                y  += BLOCK_SIZE

        if self.direction == Direction.UP:
            if (y - BLOCK_SIZE == -20):
                y = 480
            else:
                y -= BLOCK_SIZE
            
        self.head = Point(x, y)


            


